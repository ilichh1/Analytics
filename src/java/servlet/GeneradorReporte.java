/*
 * Licencia pendiente, para cambiar la licencia ir a -> Tools | Templates
 */
package servlet;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import sun.misc.BASE64Decoder;

/**
 *
 * @author Ilich Arredondo
 */
@WebServlet(name = "GeneradorReporte", urlPatterns = {"/reporte"})
public class GeneradorReporte extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String base64 = request.getParameter("chart");
        
        if (base64 == null || base64.isEmpty()) {
            response.getWriter().print("error");
            response.getWriter().close();
            this.destroy();
        }
        
        //Temporal BASE64
        String tmp64 = "";
        //Nombre temporal de nuestra imagen
        String imageName = "/temp/img"+((int)Math.random()*100)+".png";
        //Decodificamos y creamos la imagen para nuestro PDF
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] decodedBytes  = decoder.decodeBuffer(tmp64);
        BufferedImage img = ImageIO.read(new ByteArrayInputStream(decodedBytes));
        File imageF = new File(imageName);
        ImageIO.write(img, "png", imageF);
        
        
        response.setContentType("application/pdf;charset=UTF-8");
        //Creamos un nuevo documento PDF
        PDDocument pdf = new PDDocument();
        File pdfFile = new File("reporte.pdf");
        pdf.save(pdfFile);
        pdf.addPage(new PDPage());
        
        //Obtenemos la pimer hoja de nuestro pdf
        PDPage page = pdf.getPage(0);
        //Creamos una imagen partiendo de un path
        PDImageXObject pdImage = PDImageXObject.createFromFile(imageName, pdf);
        //Dibujamos la imagen en la pagina
        try (PDPageContentStream contents = new PDPageContentStream(pdf, page)) {
            //Dibujamos la imagen en la pagina
            contents.drawImage(pdImage, 70, 250);
        }
        
        response.setContentLength((int) pdfFile.length());

        FileInputStream fileIS = new FileInputStream(pdfFile);
        try (OutputStream responseOS = response.getOutputStream()) {
            int bytes;
            while ((bytes = fileIS.read()) != -1) {
                responseOS.write(bytes);
            }
        }
        this.destroy();
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
